// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: accommodation.proto

package accommodation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccommodationService_CreateHouse_FullMethodName  = "/accommodation.AccommodationService/CreateHouse"
	AccommodationService_UpdateHouse_FullMethodName  = "/accommodation.AccommodationService/UpdateHouse"
	AccommodationService_GetAllHouse_FullMethodName  = "/accommodation.AccommodationService/GetAllHouse"
	AccommodationService_GetByIdHouse_FullMethodName = "/accommodation.AccommodationService/GetByIdHouse"
	AccommodationService_DeleteHouse_FullMethodName  = "/accommodation.AccommodationService/DeleteHouse"
)

// AccommodationServiceClient is the client API for AccommodationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccommodationServiceClient interface {
	CreateHouse(ctx context.Context, in *CreateHouseReq, opts ...grpc.CallOption) (*CreateHouseRes, error)
	UpdateHouse(ctx context.Context, in *UpdateHouseReq, opts ...grpc.CallOption) (*UpdateHouseRes, error)
	GetAllHouse(ctx context.Context, in *GetallHouseReq, opts ...grpc.CallOption) (*GetAllHouseRes, error)
	GetByIdHouse(ctx context.Context, in *GetByIdHouseReq, opts ...grpc.CallOption) (*GetByIdHouseRes, error)
	DeleteHouse(ctx context.Context, in *DeleteHouseReq, opts ...grpc.CallOption) (*DeleteHouseRes, error)
}

type accommodationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccommodationServiceClient(cc grpc.ClientConnInterface) AccommodationServiceClient {
	return &accommodationServiceClient{cc}
}

func (c *accommodationServiceClient) CreateHouse(ctx context.Context, in *CreateHouseReq, opts ...grpc.CallOption) (*CreateHouseRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHouseRes)
	err := c.cc.Invoke(ctx, AccommodationService_CreateHouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceClient) UpdateHouse(ctx context.Context, in *UpdateHouseReq, opts ...grpc.CallOption) (*UpdateHouseRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateHouseRes)
	err := c.cc.Invoke(ctx, AccommodationService_UpdateHouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceClient) GetAllHouse(ctx context.Context, in *GetallHouseReq, opts ...grpc.CallOption) (*GetAllHouseRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllHouseRes)
	err := c.cc.Invoke(ctx, AccommodationService_GetAllHouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceClient) GetByIdHouse(ctx context.Context, in *GetByIdHouseReq, opts ...grpc.CallOption) (*GetByIdHouseRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByIdHouseRes)
	err := c.cc.Invoke(ctx, AccommodationService_GetByIdHouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceClient) DeleteHouse(ctx context.Context, in *DeleteHouseReq, opts ...grpc.CallOption) (*DeleteHouseRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteHouseRes)
	err := c.cc.Invoke(ctx, AccommodationService_DeleteHouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccommodationServiceServer is the server API for AccommodationService service.
// All implementations must embed UnimplementedAccommodationServiceServer
// for forward compatibility.
type AccommodationServiceServer interface {
	CreateHouse(context.Context, *CreateHouseReq) (*CreateHouseRes, error)
	UpdateHouse(context.Context, *UpdateHouseReq) (*UpdateHouseRes, error)
	GetAllHouse(context.Context, *GetallHouseReq) (*GetAllHouseRes, error)
	GetByIdHouse(context.Context, *GetByIdHouseReq) (*GetByIdHouseRes, error)
	DeleteHouse(context.Context, *DeleteHouseReq) (*DeleteHouseRes, error)
	mustEmbedUnimplementedAccommodationServiceServer()
}

// UnimplementedAccommodationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccommodationServiceServer struct{}

func (UnimplementedAccommodationServiceServer) CreateHouse(context.Context, *CreateHouseReq) (*CreateHouseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHouse not implemented")
}
func (UnimplementedAccommodationServiceServer) UpdateHouse(context.Context, *UpdateHouseReq) (*UpdateHouseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHouse not implemented")
}
func (UnimplementedAccommodationServiceServer) GetAllHouse(context.Context, *GetallHouseReq) (*GetAllHouseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllHouse not implemented")
}
func (UnimplementedAccommodationServiceServer) GetByIdHouse(context.Context, *GetByIdHouseReq) (*GetByIdHouseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdHouse not implemented")
}
func (UnimplementedAccommodationServiceServer) DeleteHouse(context.Context, *DeleteHouseReq) (*DeleteHouseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHouse not implemented")
}
func (UnimplementedAccommodationServiceServer) mustEmbedUnimplementedAccommodationServiceServer() {}
func (UnimplementedAccommodationServiceServer) testEmbeddedByValue()                              {}

// UnsafeAccommodationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccommodationServiceServer will
// result in compilation errors.
type UnsafeAccommodationServiceServer interface {
	mustEmbedUnimplementedAccommodationServiceServer()
}

func RegisterAccommodationServiceServer(s grpc.ServiceRegistrar, srv AccommodationServiceServer) {
	// If the following call pancis, it indicates UnimplementedAccommodationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccommodationService_ServiceDesc, srv)
}

func _AccommodationService_CreateHouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHouseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceServer).CreateHouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationService_CreateHouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceServer).CreateHouse(ctx, req.(*CreateHouseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationService_UpdateHouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHouseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceServer).UpdateHouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationService_UpdateHouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceServer).UpdateHouse(ctx, req.(*UpdateHouseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationService_GetAllHouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetallHouseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceServer).GetAllHouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationService_GetAllHouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceServer).GetAllHouse(ctx, req.(*GetallHouseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationService_GetByIdHouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdHouseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceServer).GetByIdHouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationService_GetByIdHouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceServer).GetByIdHouse(ctx, req.(*GetByIdHouseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationService_DeleteHouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHouseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceServer).DeleteHouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationService_DeleteHouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceServer).DeleteHouse(ctx, req.(*DeleteHouseReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AccommodationService_ServiceDesc is the grpc.ServiceDesc for AccommodationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccommodationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accommodation.AccommodationService",
	HandlerType: (*AccommodationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHouse",
			Handler:    _AccommodationService_CreateHouse_Handler,
		},
		{
			MethodName: "UpdateHouse",
			Handler:    _AccommodationService_UpdateHouse_Handler,
		},
		{
			MethodName: "GetAllHouse",
			Handler:    _AccommodationService_GetAllHouse_Handler,
		},
		{
			MethodName: "GetByIdHouse",
			Handler:    _AccommodationService_GetByIdHouse_Handler,
		},
		{
			MethodName: "DeleteHouse",
			Handler:    _AccommodationService_DeleteHouse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accommodation.proto",
}
