// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: favorites.proto

package favorites

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FavoritesClient is the client API for Favorites service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FavoritesClient interface {
	CreateFavorites(ctx context.Context, in *CreateFavoritesReq, opts ...grpc.CallOption) (*CreateFavoritesRes, error)
	GetAllFavorites(ctx context.Context, in *GetAllFavoritesReq, opts ...grpc.CallOption) (*GetAllFavoritesRes, error)
	GetByIdFavorites(ctx context.Context, in *GetByIdFavoritesReq, opts ...grpc.CallOption) (*GetByIdFavoritesRes, error)
	DeleteFavorites(ctx context.Context, in *DeleteFavoritesReq, opts ...grpc.CallOption) (*DeleteFavoritesRes, error)
}

type favoritesClient struct {
	cc grpc.ClientConnInterface
}

func NewFavoritesClient(cc grpc.ClientConnInterface) FavoritesClient {
	return &favoritesClient{cc}
}

func (c *favoritesClient) CreateFavorites(ctx context.Context, in *CreateFavoritesReq, opts ...grpc.CallOption) (*CreateFavoritesRes, error) {
	out := new(CreateFavoritesRes)
	err := c.cc.Invoke(ctx, "/favorites.Favorites/CreateFavorites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoritesClient) GetAllFavorites(ctx context.Context, in *GetAllFavoritesReq, opts ...grpc.CallOption) (*GetAllFavoritesRes, error) {
	out := new(GetAllFavoritesRes)
	err := c.cc.Invoke(ctx, "/favorites.Favorites/GetAllFavorites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoritesClient) GetByIdFavorites(ctx context.Context, in *GetByIdFavoritesReq, opts ...grpc.CallOption) (*GetByIdFavoritesRes, error) {
	out := new(GetByIdFavoritesRes)
	err := c.cc.Invoke(ctx, "/favorites.Favorites/GetByIdFavorites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoritesClient) DeleteFavorites(ctx context.Context, in *DeleteFavoritesReq, opts ...grpc.CallOption) (*DeleteFavoritesRes, error) {
	out := new(DeleteFavoritesRes)
	err := c.cc.Invoke(ctx, "/favorites.Favorites/DeleteFavorites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FavoritesServer is the server API for Favorites service.
// All implementations must embed UnimplementedFavoritesServer
// for forward compatibility
type FavoritesServer interface {
	CreateFavorites(context.Context, *CreateFavoritesReq) (*CreateFavoritesRes, error)
	GetAllFavorites(context.Context, *GetAllFavoritesReq) (*GetAllFavoritesRes, error)
	GetByIdFavorites(context.Context, *GetByIdFavoritesReq) (*GetByIdFavoritesRes, error)
	DeleteFavorites(context.Context, *DeleteFavoritesReq) (*DeleteFavoritesRes, error)
	mustEmbedUnimplementedFavoritesServer()
}

// UnimplementedFavoritesServer must be embedded to have forward compatible implementations.
type UnimplementedFavoritesServer struct {
}

func (UnimplementedFavoritesServer) CreateFavorites(context.Context, *CreateFavoritesReq) (*CreateFavoritesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFavorites not implemented")
}
func (UnimplementedFavoritesServer) GetAllFavorites(context.Context, *GetAllFavoritesReq) (*GetAllFavoritesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFavorites not implemented")
}
func (UnimplementedFavoritesServer) GetByIdFavorites(context.Context, *GetByIdFavoritesReq) (*GetByIdFavoritesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdFavorites not implemented")
}
func (UnimplementedFavoritesServer) DeleteFavorites(context.Context, *DeleteFavoritesReq) (*DeleteFavoritesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFavorites not implemented")
}
func (UnimplementedFavoritesServer) mustEmbedUnimplementedFavoritesServer() {}

// UnsafeFavoritesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FavoritesServer will
// result in compilation errors.
type UnsafeFavoritesServer interface {
	mustEmbedUnimplementedFavoritesServer()
}

func RegisterFavoritesServer(s grpc.ServiceRegistrar, srv FavoritesServer) {
	s.RegisterService(&Favorites_ServiceDesc, srv)
}

func _Favorites_CreateFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFavoritesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoritesServer).CreateFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/favorites.Favorites/CreateFavorites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoritesServer).CreateFavorites(ctx, req.(*CreateFavoritesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Favorites_GetAllFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFavoritesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoritesServer).GetAllFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/favorites.Favorites/GetAllFavorites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoritesServer).GetAllFavorites(ctx, req.(*GetAllFavoritesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Favorites_GetByIdFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdFavoritesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoritesServer).GetByIdFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/favorites.Favorites/GetByIdFavorites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoritesServer).GetByIdFavorites(ctx, req.(*GetByIdFavoritesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Favorites_DeleteFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFavoritesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoritesServer).DeleteFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/favorites.Favorites/DeleteFavorites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoritesServer).DeleteFavorites(ctx, req.(*DeleteFavoritesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Favorites_ServiceDesc is the grpc.ServiceDesc for Favorites service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Favorites_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "favorites.Favorites",
	HandlerType: (*FavoritesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFavorites",
			Handler:    _Favorites_CreateFavorites_Handler,
		},
		{
			MethodName: "GetAllFavorites",
			Handler:    _Favorites_GetAllFavorites_Handler,
		},
		{
			MethodName: "GetByIdFavorites",
			Handler:    _Favorites_GetByIdFavorites_Handler,
		},
		{
			MethodName: "DeleteFavorites",
			Handler:    _Favorites_DeleteFavorites_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "favorites.proto",
}
